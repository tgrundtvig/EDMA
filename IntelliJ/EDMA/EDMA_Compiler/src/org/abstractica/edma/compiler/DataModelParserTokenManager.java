/* Generated By:JavaCC: Do not edit this line. DataModelParserTokenManager.java */
package org.abstractica.edma.compiler;

/** Token Manager. */
public class DataModelParserTokenManager implements DataModelParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x61004000L) != 0L)
         {
            jjmatchedKind = 52;
            return 54;
         }
         if ((active0 & 0x7f7fe9e7bb000L) != 0L)
         {
            jjmatchedKind = 53;
            return 21;
         }
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 70;
            return -1;
         }
         if ((active0 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            return 0;
         }
         if ((active0 & 0x800000000000000L) != 0L)
            return 13;
         if ((active0 & 0x40000000000000L) != 0L || (active1 & 0x4L) != 0L)
            return 23;
         if ((active0 & 0x80100800000L) != 0L)
         {
            jjmatchedKind = 53;
            return 12;
         }
         if ((active1 & 0x10L) != 0L)
            return 44;
         return -1;
      case 1:
         if ((active1 & 0x80L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x7febb9efbb000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 1;
            }
            return 21;
         }
         if ((active0 & 0x14400000000L) != 0L)
            return 21;
         if ((active0 & 0x61004000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 52;
               jjmatchedPos = 1;
            }
            return 54;
         }
         return -1;
      case 2:
         if ((active0 & 0x61004000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 54;
         }
         if ((active0 & 0x200003000L) != 0L)
            return 21;
         if ((active0 & 0x7febd9efb8000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 2;
            return 21;
         }
         return -1;
      case 3:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 54;
         }
         if ((active0 & 0x3febc16f98000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
            return 21;
         }
         if ((active0 & 0x4000188020000L) != 0L)
            return 21;
         if ((active0 & 0x21004000L) != 0L)
            return 54;
         return -1;
      case 4:
         if ((active0 & 0x37cb816f98000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 4;
            return 21;
         }
         if ((active0 & 0x820400000000L) != 0L)
            return 21;
         if ((active0 & 0x40000000L) != 0L)
            return 54;
         return -1;
      case 5:
         if ((active0 & 0x1440802a00000L) != 0L)
            return 21;
         if ((active0 & 0x238b014598000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 5;
            return 21;
         }
         return -1;
      case 6:
         if ((active0 & 0x220a010400000L) != 0L)
            return 21;
         if ((active0 & 0x181004198000L) != 0L)
         {
            if (jjmatchedPos != 6)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 6;
            }
            return 21;
         }
         return -1;
      case 7:
         if ((active0 & 0x189004118000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 7;
            return 21;
         }
         if ((active0 & 0x80000L) != 0L)
            return 21;
         return -1;
      case 8:
         if ((active0 & 0x8004110000L) != 0L)
            return 21;
         if ((active0 & 0x181000008000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 8;
            return 21;
         }
         return -1;
      case 9:
         if ((active0 & 0x80000000000L) != 0L)
            return 21;
         if ((active0 & 0x101000008000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 9;
            return 21;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 2);
      case 10:
         return jjStopAtPos(0, 4);
      case 13:
         return jjStopAtPos(0, 3);
      case 32:
         return jjStopAtPos(0, 1);
      case 40:
         return jjStopAtPos(0, 55);
      case 41:
         return jjStopAtPos(0, 56);
      case 43:
         return jjStopAtPos(0, 65);
      case 44:
         return jjStopAtPos(0, 62);
      case 45:
         jjmatchedKind = 66;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L);
      case 46:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x40L, 0x0L);
      case 58:
         return jjStopAtPos(0, 61);
      case 60:
         return jjStopAtPos(0, 67);
      case 62:
         return jjStartNfaWithStates_0(0, 68, 44);
      case 63:
         return jjStopAtPos(0, 64);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x4002000000L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000400000L, 0x0L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x1100010010000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x80100800000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x800000000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x2020004000000L, 0x0L);
      case 75:
         return jjMoveStringLiteralDfa1_0(0x20000L, 0x0L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x4000080000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x200003000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x50400000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0xa000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x400800100000L, 0x0L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x8008000L, 0x0L);
      case 91:
         return jjStartNfaWithStates_0(0, 59, 13);
      case 93:
         return jjStopAtPos(0, 60);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x40000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x4000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x20000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 57);
      case 125:
         return jjStopAtPos(0, 58);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 46:
         if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         break;
      case 62:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x240018000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x100010080000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x88120000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2020504200000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0x5201001400000L, active1, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x80020000000L, active1, 0L);
      case 115:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 38, 21);
         break;
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x400800000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x4a000004000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 78:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(2, 12, 21);
         break;
      case 88:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(2, 13, 21);
         break;
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x408000000L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x1200000L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x4008c000L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001000120000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00000000000L);
      case 112:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 33, 21);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x480800000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x100080000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2040006010000L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000120800000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x800010890000L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 100:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(3, 17, 21);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 54);
         break;
      case 101:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 29, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000004000000L);
      case 103:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 21);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x400002000000L);
      case 108:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 54);
         return jjMoveStringLiteralDfa4_0(active0, 0x20a000000000L);
      case 109:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 21);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000400000L);
      case 113:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x1040000000L);
      case 116:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 21);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20800008000L);
      case 119:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 77:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000L);
      case 101:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 30, 54);
         return jjMoveStringLiteralDfa5_0(active0, 0x200000008000L);
      case 102:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 34, 21);
         break;
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000000L);
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0xa000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000900000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x180004000000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 41, 21);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 21);
         return jjMoveStringLiteralDfa5_0(active0, 0x1000080000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40010200000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000000000L);
      case 68:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 21, 21);
         else if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 48, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000100000L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000L);
      case 103:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 21);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000080000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000L);
      case 110:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 21);
         break;
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000400000L);
      case 115:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 23, 21);
         return jjMoveStringLiteralDfa6_0(active0, 0xa000000000L);
      case 116:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 21);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x1004000000L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(6, 22, 21);
         break;
      case 104:
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 37;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 110:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 45, 21);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000088000L);
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      case 114:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 21);
         break;
      case 116:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(6, 28, 21);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000L);
      case 100:
         return jjMoveStringLiteralDfa8_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa8_0(active0, 0x10000L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000L);
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000L);
      case 110:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 21);
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L);
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(8, 26, 21);
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 108:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 21);
         break;
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(8, 20, 21);
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa10_0(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0x100000000000L);
      case 115:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 43, 21);
         break;
      case 116:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000L);
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(10, 15, 21);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 44, 21);
         break;
      case 115:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 36, 21);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 54;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(21);
                  }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(19);
                  }
                  break;
               case 44:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 45;
                  if (curChar == 45)
                     jjCheckNAdd(22);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAdd(51);
                  }
                  else if (curChar == 45)
                     jjCheckNAdd(22);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 12:
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(21);
                  break;
               case 5:
                  if ((0xfffffffbffffffffL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                     jjCheckNAddStates(3, 6);
                  }
                  else if (curChar == 45)
                     jjCheckNAddTwoStates(48, 51);
                  else if (curChar == 62)
                     jjAddStates(7, 8);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 0:
                  if (curChar == 47)
                     jjCheckNAddStates(9, 11);
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(9, 11);
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 3:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 13:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 22:
                  if (curChar == 45 && kind > 63)
                     kind = 63;
                  break;
               case 24:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
               case 34:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 26:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 33:
                  if (curChar == 34 && kind > 69)
                     kind = 69;
                  break;
               case 35:
                  if ((0xfffffffbffffffffL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x3ff000000000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 42:
                  if (curChar == 34 && kind > 70)
                     kind = 70;
                  break;
               case 43:
                  if (curChar == 62)
                     jjAddStates(7, 8);
                  break;
               case 45:
                  if (curChar == 60 && kind > 63)
                     kind = 63;
                  break;
               case 46:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 45)
                     jjCheckNAddTwoStates(48, 51);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 9)
                     kind = 9;
                  jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAdd(51);
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 10)
                     kind = 10;
                  jjCheckNAddStates(3, 6);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 11)
                     kind = 11;
                  jjCheckNAdd(53);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 54:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(21);
                  }
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(19);
                  }
                  break;
               case 12:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(21);
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 5:
                  if ((0xffffffffefffffffL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                  }
                  else if (curChar == 92)
                     jjAddStates(12, 13);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                     jjCheckNAdd(21);
                  }
                  else if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 13;
                  if ((0x7fffffe00000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(19);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 1:
                  jjAddStates(9, 11);
                  break;
               case 6:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 7:
                  if (curChar == 115 && kind > 18)
                     kind = 18;
                  break;
               case 8:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 9:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 14:
                  jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 15:
                  if (curChar == 93 && kind > 51)
                     kind = 51;
                  break;
               case 17:
                  if (curChar == 91)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 18:
                  if ((0x7fffffe00000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 19:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(19);
                  break;
               case 20:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(21);
                  break;
               case 21:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  jjCheckNAdd(21);
                  break;
               case 26:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 27:
                  if (curChar == 92)
                     jjAddStates(14, 15);
                  break;
               case 28:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 34:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 35:
                  if ((0xffffffffefffffffL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 36:
                  if (curChar == 92)
                     jjAddStates(12, 13);
                  break;
               case 37:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 41:
                  if ((0x7e0000007eL & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 42:
                  if ((0x14404410000000L & l) != 0L && kind > 70)
                     kind = 70;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 5:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 70)
                     kind = 70;
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(9, 11);
                  break;
               case 14:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 26:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 54 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   26, 27, 33, 48, 49, 51, 53, 44, 46, 1, 2, 4, 37, 42, 28, 34, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\115\111\116", "\115\101\130", "\156\165\154\154", 
"\126\141\154\165\145\104\157\155\141\151\156", "\104\141\164\141\115\157\144\145\154", "\113\151\156\144", null, 
"\122\145\154\141\164\151\157\156", "\123\151\156\147\154\145\164\157\156", "\125\156\151\161\165\145", 
"\103\157\155\160\141\162\145", "\105\161\165\141\154\163", "\166\157\151\144", "\101\143\164\151\157\156", 
"\111\156\164\145\162\146\141\143\145", "\126\151\145\167", "\104\145\146\141\165\154\164", "\164\162\165\145", 
"\146\141\154\163\145", "\114\151\163\164", "\105\156\165\155", "\115\141\160", 
"\117\156\145\117\146", "\123\164\162\165\143\164", "\103\157\156\163\164\162\141\151\156\164\163", 
"\120\165\142\154\151\163\150", "\101\163", "\120\165\142\154\151\163\150\101\163", "\117\156", 
"\111\156\160\165\164", "\117\165\164\160\165\164", "\105\162\162\157\162\103\157\144\145\163", 
"\104\145\163\143\162\151\160\164\151\157\156", "\102\157\157\154\145\141\156", "\123\164\162\151\156\147", 
"\106\154\157\141\164", "\104\157\165\142\154\145", "\111\156\164\145\147\145\162", 
"\114\157\156\147", null, null, null, "\55\76", "\50", "\51", "\173", "\175", "\133", "\135", 
"\72", "\54", null, "\77", "\53", "\55", "\74", "\76", null, null, "\56\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "INSIDE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[54];
private final int[] jjstateSet = new int[108];
protected char curChar;
/** Constructor. */
public DataModelParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public DataModelParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 54; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
