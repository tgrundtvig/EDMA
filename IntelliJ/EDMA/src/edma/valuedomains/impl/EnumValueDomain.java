package edma.valuedomains.impl;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;
import java.util.ArrayList;

import edma.util.StringUtil;
import edma.valuedomains.IEnumValueDomain;
import edma.valuedomains.IExternalConstraints;
import edma.valuedomains.exceptions.InvalidValueException;
import edma.valuedomains.impl.parser.ValueToken;
import edma.valuedomains.impl.parser.ValueToken.TokenType;
import edma.valuedomains.impl.parser.ValueTokenizer;

public class EnumValueDomain extends AMetaValueDomain implements
		IEnumValueDomain
{
	private final ArrayList<String> elements;

	public EnumValueDomain(	String name,
							String scope,
							int index,
							Constraint[] constraints,
							boolean autoGenerated)
	{
		super(name, scope, index, constraints, autoGenerated);
		this.elements = new ArrayList<String>();
	}

	public void trim()
	{
		elements.trimToSize();
	}

	public void addElement(String element)
	{
		if(element == null) throw new NullPointerException();
		if(elements.contains(element)) throw new RuntimeException("Enum element "
				+ element + " already exists");
		elements.add(element);
	}

	public int getIndex(String value)
	{
		for(int i = 0; i < elements.size(); ++i)
		{
			if(elements.get(i).equals(value)) return i;
		}
		throw new RuntimeException("Enum does not contain the value: " + value);
	}

	@Override
	public EMetaType getEMetaType()
	{
		return EMetaType.Enum;
	}

	@Override
	public IEnumValueDomain asEnum()
	{
		return this;
	}

	@Override
	public boolean contains(Object o)
	{
		if(!(o instanceof String)) return false;
		String value = (String) o;
		for(String s : elements)
		{
			if(s.equals(value)) return true;
		}
		return false;
	}

	@Override
	protected boolean needNativeValidate()
	{
		return true;
	}

	@Override
	public void nativeValidate(Object o) throws InvalidValueException
	{
		String str = (String) o;
		for(String s : elements)
		{
			if(s.equals(str)) return;
		}
		throw new InvalidValueException(this,
										new Constraint(	"Enum_Contains",
														"Check membership"),
										"The value \""
												+ StringUtil.escapeString(str)
												+ "\" is not a member of the Enum value domain "
												+ getName());
	}

	@Override
	public void notNullValueToString(Object o, StringBuilder res)
	{
		res.append((String) o);
	}

	@Override
	protected Object valueFromTokenizer(ValueTokenizer tokenizer,
										IExternalConstraints external) throws InvalidValueException
	{
		ValueToken token = tokenizer.getNextToken();
		if(token.getType() != TokenType.Value) throw new InvalidValueException(	this,
																				parseConstraint,
																				"Error parsing Enum");
		if("null".equals(token.getValue())) return null;
		Object res = token.getValue();
		validate(res, external);
		return res;
	}

	@Override
	public boolean notNullValueEqual(Object o1, Object o2)
	{
		return o1.equals(o2);
	}

	@Override
	public int notNullValueCompare(Object o1, Object o2)
	{
		Integer i1 = getIndex((String) o1);
		Integer i2 = getIndex((String) o2);
		return i1.compareTo(i2);
	}

	@Override
	public int notNullValueHashCode(Object o)
	{
		return o.hashCode();
	}

	@Override
	public int getNumberOfElements()
	{
		return elements.size();
	}

	@Override
	public String getElement(int i)
	{
		return elements.get(i);
	}

	@Override
	public String getBasicType()
	{
		return "String";
	}

	@Override
	public void writeValue(Object value, DataOutput out) throws IOException
	{
		out.writeUTF((String) value);

	}

	@Override
	protected Object doReadValue(DataInput in, IExternalConstraints external)	throws IOException,
																				InvalidValueException
	{
		String res = in.readUTF();
		validate(res, external);
		return res;

	}
}
