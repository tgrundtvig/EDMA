package edma.valuedomains.impl;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import edma.valuedomains.IBooleanValueDomain;
import edma.valuedomains.IExternalConstraints;
import edma.valuedomains.exceptions.InvalidValueException;
import edma.valuedomains.impl.parser.ValueToken;
import edma.valuedomains.impl.parser.ValueToken.TokenType;
import edma.valuedomains.impl.parser.ValueTokenizer;

public class BooleanValueDomain extends AMetaValueDomain implements
		IBooleanValueDomain
{

	public BooleanValueDomain(String name, String scope, int index, Constraint[] constraints, boolean autoGenerated)
	{
		super(name, scope, index, constraints, autoGenerated);
	}

	@Override
	public EMetaType getEMetaType()
	{
		return EMetaType.Boolean;
	}

	@Override
	public boolean contains(Object o)
	{
		if(!(o instanceof Boolean)) return false;
		return true;
	}
	
	@Override
	protected boolean needNativeValidate()
	{
		return false;
	}
	
	@Override
	public void nativeValidate(Object o) throws InvalidValueException
	{
		//We do nothing here, since there is no natural invariants on a Boolean value
	}


	@Override
	public IBooleanValueDomain asBoolean()
	{
		return this;
	}

	@Override
	protected void notNullValueToString(Object o, StringBuilder res)
	{
		if(o == null) res.append("null");
		else res.append((Boolean) o);
	}

	@Override
	protected Object valueFromTokenizer(ValueTokenizer tokenizer, IExternalConstraints external) throws InvalidValueException
	{
		ValueToken token = tokenizer.getNextToken();
		if(token.getType() != TokenType.Value) throw new InvalidValueException(this, parseConstraint, "Error parsing Boolean");
		if("null".equals(token.getValue())) return null;
		try
		{
			return Boolean.parseBoolean(token.getValue());
		}
		catch(Exception e)
		{
			throw new InvalidValueException(this, parseConstraint, "Error parsing Boolean");
		}
		
	}

	@Override
	public boolean notNullValueEqual(Object o1, Object o2)
	{
		return o1.equals(o2);
	}

	@Override
	public int notNullValueCompare(Object o1, Object o2)
	{
		return ((Boolean) o1).compareTo((Boolean) o2);
	}

	@Override
	public int notNullValueHashCode(Object o)
	{
		return o.hashCode();
	}

	@Override
	public String getBasicType()
	{
		return "Boolean";
	}

	@Override
	public void writeValue(Object value, DataOutput out) throws IOException
	{
		out.writeBoolean((Boolean) value);
	}

	@Override
	protected Object doReadValue(DataInput in, IExternalConstraints external) throws IOException, InvalidValueException
	{
		Boolean res = in.readBoolean();
		validate(res, external);
		return res;
	}
}
