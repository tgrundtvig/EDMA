package org.abstractica.edma.valuedomains;

import java.io.DataInput;
import java.io.DataOutput;
import java.io.IOException;

import org.abstractica.edma.valuedomains.exceptions.InvalidValueException;
import org.abstractica.edma.valuedomains.impl.Constraint;

public interface IMetaValueDomain
{
	public enum EMetaType {String, Integer, Long, Float, Double, Boolean, Enum, Struct, List, Map, OneOf}
	public EMetaType getEMetaType();
	public String getBasicType();
	
	//Name and index
	public String getName();
	public String getScope(); //returns null if this is the root scope
	public int getIndex();
	
	//Returns true if this value domain is automatically generated from a data model.
	public boolean isAutoGenerated();
	
	//Constraints
	public Constraint[] getConstraints();
	
	//Only one of the following methods will be implemented. 
	public IStringValueDomain asString();
	public IIntegerValueDomain asInteger();
	public ILongValueDomain asLong();
	public IFloatValueDomain asFloat();
	public IDoubleValueDomain asDouble();
	public IBooleanValueDomain asBoolean();
	public IEnumValueDomain asEnum();
	public IStructValueDomain asStruct();
	public IListValueDomain asList();
	public IMapValueDomain asMap();
	public IOneOfValueDomain asOneOf();
	
	public boolean needValidate();
	public void validate(Object o, IExternalConstraints external) throws InvalidValueException;
	public boolean contains(Object o);
	
	public boolean valueEqual(Object o1, Object o2);
	public int valueCompare(Object o1, Object o2);
	public int valueHashCode(Object o);
	
	public Object newValue(Object value);
	
	public String valueToString(Object o);
	public Object valueFromString(String s, IExternalConstraints external) throws InvalidValueException;
	
	public void writeValue(Object value, DataOutput out) throws IOException;
	public Object readValue(DataInput in, IExternalConstraints external) throws IOException, InvalidValueException;
	public Object readValueNoValidate(DataInput in) throws IOException;
}
