#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\begin_preamble
\usepackage{graphicx}
\usepackage{subfig}
\usepackage{color}
\usepackage{amsmath}
\usepackage{wrapfig}
\usepackage{nameref}
\usepackage{todonotes}
\usepackage{url}
\usepackage{listings}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Problem Analysis
\end_layout

\begin_layout Subsection
Identifying the problem
\end_layout

\begin_layout Standard
An abstract or conceptual data model is often a good place to start, when
 modeling objects and concepts from real or fantasy worlds.
 The conceptual data model describes the different kinds of entities in
 the model and the relations between them.
\end_layout

\begin_layout Standard
From our experience with programming we have noticed, that in the process
 of moving from a conceptual data model in a specific domain into an actual
 working implementation of the model, there are a number of hurdles that
 slows down the process:
\end_layout

\begin_layout Enumerate

\series bold
The amount of code
\series default

\begin_inset Newline newline
\end_inset

The amount of code it takes to implement a conceptual data model in a typical
 object oriented language is much larger than the description of the conceptual
 model.
 Even with the help of copy-paste and modern IDEs with code templates and
 code completion, it still takes quite some time to write the code.
\end_layout

\begin_layout Enumerate

\series bold
Implementation of bi-directional entity-relationships
\series default

\begin_inset Newline newline
\end_inset

In a conceptual or abstract data model an entity-relationship is a relationship
 between two entity kinds.
 e.g.
 a student can be enrolled on a course.
 This is a many-to-many relationship, meaning that there can be many different
 students enrolled on the same course and a student can be enrolled on many
 different courses.
\begin_inset Newline newline
\end_inset

This could be implemented by adding a set of students to the course class
 and create methods to add and remove students.
 But if you then want the courses that a specific student is enrolled on,
 you would have to go through all the courses and lists of students.
 Therefore one would most often also add a set of courses to the student
 class, and make sure that this set is updated when a student is added to
 or removed from a course.
\end_layout

\begin_layout Enumerate

\series bold
Accessing instances of the model from remote locations
\series default

\begin_inset Newline newline
\end_inset

Many software systems are distributed on several different machines and
 thus needs to communicate over the boundaries of different VMs and physical
 machines.
 This means that data must be serialized and de-serialized preferably in
 a seamless manner.
 Even though there exists tools like Java RMI that can automate some of
 this process, it still takes time configure and use these tools.
\end_layout

\begin_layout Enumerate

\series bold
Providing user interfaces for data input
\series default

\begin_inset Newline newline
\end_inset

Software systems often interact with humans and must provide interfaces
 that can give information to and get information from humans.
\end_layout

\begin_layout Enumerate

\series bold
Thread-safe access to the model instances in a multithreaded environment
\series default

\begin_inset Newline newline
\end_inset

The programming of concurrent programs is always an interesting task.
 Errors occurring from race conditions, dead locks etc.
 are often hard to detect and can reside in the system undetected for a
 long time before they suddenly surfaces and cause havoc
\begin_inset CommandInset citation
LatexCommand cite
key "sutter2007software"

\end_inset

.
\end_layout

\begin_layout Enumerate

\series bold
Persistence of the instances of the model (if needed)
\series default

\begin_inset Newline newline
\end_inset

There are many ways to obtain persistence of data models from object oriented
 languages and most of them involves the installation and use of some sort
 of external relational database.
 The mapping between the object oriented model and relational model can
 either be done by hand or some sort of object relational mapping system
 can be used.
\begin_inset Newline newline
\end_inset

However, using a relational database system introduces a number of issues
 related to the impedance mismatch of the object paradigm and the relational
 paradigm.
 The data types in the two types of systems are often incompatible, and
 difficult to map without imposing a significant overhead
\begin_inset CommandInset citation
LatexCommand citet
key "ireland2009classification,keller1997mapping,vietnam2007,subramanian1999performance"

\end_inset

.
\end_layout

\begin_layout Standard
Although all the mentioned hurdles can be overcome, we are lazy programmers
 and we agree with what Terence Parr, the creator of ANTLR (Another Tool
 For Language Recognition), has made his guidance principle: 
\end_layout

\begin_layout Quotation
Why program by hand in five days what you can spend five years of your life
 automating?
\end_layout

\begin_layout Subsubsection
Problem Restrictions
\end_layout

\begin_layout Standard
This thesis is not about creating a fast and efficient database system that
 can store large amounts of data.
 There are already many good solutions to this problem backed by decades
 of research and development on the market, and we have no intentions of
 competing with those.
\end_layout

\begin_layout Subsection
Solving the problem
\end_layout

\begin_layout Standard
We intend to solve the problem by building a software system that should
 take as input:
\end_layout

\begin_layout Itemize
A definition of a conceptual data model.
\end_layout

\begin_layout Itemize
A definition of an interface to the data model.
\end_layout

\begin_layout Standard
The system should then generate the following:
\end_layout

\begin_layout Itemize
Java Interfaces and classes that represents an object oriented representation
 of the data model.
\end_layout

\begin_layout Itemize
A java interface that reflects the defined interface to the data model.
\end_layout

\begin_layout Itemize
Java stub classes where the user can implement the domain specific methods
 of the generated data model interface, by using the generated object oriented
 representation of the data model.
\end_layout

\begin_layout Itemize
A server program and a client proxy that implements the interface to the
 data model, so the instances of the data model can be accessed seamlessly
 over a socket connection.
\end_layout

\begin_layout Itemize
A text based user interface that lets a human user invoke the methods in
 the interface to the data model.
\end_layout

\begin_layout Standard
When the user have implemented the interface to data model, he should be
 able to create instances of the data model that obey the following requirements
:
\end_layout

\begin_layout Itemize
They must be thread safe.
 By this we mean that the instance should act in every respect as if all
 the methods in the interface where synchronized on the same object.
\end_layout

\begin_layout Itemize
Upon the creation of a data model instance it should be possible to choose
 to have the instance persisted.
 If this option is chosen, the instance must be automatically persisted
 in a durable way, meaning that when a call to a method in the data model
 interface returns successfully the state known by the calling thread immediatel
y before the return should be persisted successfully.
\end_layout

\begin_layout Itemize
The methods in the interface to the data model must be executed atomically.
 By this we mean that when the user implements the methods, he should be
 given the opportunity to automatically roll back at any point during the
 execution, if the execution cannot be completed successfully.
 This should then bring the data model instance back to the same state it
 had upon the beginning of the execution.
\end_layout

\begin_layout Standard
We will call the system Effective Data Model Abstraction (EDMA).
\end_layout

\begin_layout Standard
We will develop the system using a modular interface based design, so the
 individual parts of the system can easily be replaced with alternative
 implementations.
\end_layout

\begin_layout Standard
Instead of auto-generating all the code that is needed to implement a specific
 data model, we will create a general runtime interface that are independent
 of the specific data models.
 We will then only auto-generate interfaces and binding code that binds
 the generated data model specific interfaces to the general runtime interface.
\end_layout

\begin_layout Standard
We will strive to design the runtime interface in a way that gives the maximum
 possible flexibility in how different implementations handle the defined
 requirements on the data model instances.
 In this way we are using our best effort to abstract the data models away
 from the underlying technology, thus decoupling the data model design and
 business logic from the applied technology.
\end_layout

\begin_layout Standard
With this design we are still strongly bound to the Java language, since
 the user must implement the data model interface in Java.
 One way to get around this, would be to design a language for interacting
 with a conceptual data model and then have the user implement the interface
 in this language and translate it to various target languages.
 But then we could not benefit from the highly specialized Java IDEs that
 makes coding fun and enjoyable.
\end_layout

\begin_layout Paragraph
Data Values
\end_layout

\begin_layout Standard
In a data model we have different kinds of entities, each kind of entity
 defines some attributes that can hold values in an entity instance.
 These values can be different in each entity instance, but they will have
 the same meaning and type across all the entity instances.
 As an example a kind of entity could be Person and have the attribute name
 of type string.
 Then all Person instances would have a value of type string.
 The values could be different in the instances but they would all represent
 the name of the Person instance.
 It would not make sense to store an email address or an URL in that value,
 although the type system would allow it because they are all strings.
 The type string refer to an underlying representation of the value and
 is not a very abstract concept.
 Instead the name of a Person should have the type PersonName and the email
 address should have the type EmailAddress and it should not be possible
 to store a persons name in an attribute with the type EmailAddress.
 This would be a much more fine grained type system.
\end_layout

\begin_layout Standard
As a part of the EDMA System we will define a fine grained data type system
 for arbitrary complex, but immutable data values, where the user can define
 his own semantically unique data types with build-in validation for a specific
 domain.
 We will call this the value domain system.
 The value domain system will give us several advantages:
\end_layout

\begin_layout Itemize
It can be used as an infrastructure for moving data between different applicatio
ns and data model instances.
 In this way all mutable state can be contained inside data model instances
 and everything outside is immutable.
 This makes it simple to distribute data model instances seamlessly in a
 distributed system.
\end_layout

\begin_layout Itemize
It lets the java compiler find a new category of semantic errors for example
 if an email is used in the place of a name, because even though they are
 both strings, they will have different types in the value domain system
 and thus be represented by different Java classes.
\end_layout

\begin_layout Itemize
It adds useful domain specific semantic information to the interfaces of
 the data models.
\end_layout

\begin_layout Itemize
It adds useful domain specific semantic information to the meta model, that
 a code generator can use to auto generate utility programs that are specialized
 to work on a specific data model within a specific domain.
\end_layout

\begin_layout Standard
We will try to keep the generated and the user written code as separated
 as possible.
 When there is a need to embed user written code into a generated file,
 that file should be kept to a minimum size, merely functioning as a container
 for the user written code.
 We will also strive to generate code that looks and feels like well-written,
 handmade code including javadoc.
\end_layout

\begin_layout Subsection
Related Work
\end_layout

\begin_layout Paragraph
Entity-Relationship model
\end_layout

\begin_layout Standard
Our meta data model is heavily inspired by the entity-relationship model
 (ER model).
 The ER model is an abstract and conceptual way of representing a data model
\begin_inset CommandInset citation
LatexCommand cite
key "chen1976entity"

\end_inset

.
 The main concepts in the ER model are entities and the relationships between
 them.
 The ER model strives to be a representation of the data model that is close
 to the human perception of the data model and is not concerned with how
 the data is physically stored.
\end_layout

\begin_layout Paragraph
Apache Torque
\end_layout

\begin_layout Standard
Apache Torque is an object-relational mapper for Java, that also uses the
 idea of auto-generating the object oriented model instead of having the
 user write it by hand and use annotations for the mapping
\begin_inset CommandInset citation
LatexCommand cite
key "torque"

\end_inset

.
\end_layout

\begin_layout Standard
In Torque the user defines the data model in an XML schema and Torque then
 generates both the object oriented model, the database schemes and the
 binding between the object oriented model and the relational database.
 Torque can also generate the XML schema from an existing database model.
\end_layout

\begin_layout Paragraph*
Eclipse Modeling Framework
\end_layout

\begin_layout Standard
Some inspiration for EDMA came from working with the Eclipse Modeling Framework
 (EMF) in a model driven develop course.
 The Eclipse Modeling Framework is a huge framework with a lot of useful
 functionality.
 Unfortunately we did not feel that it was very pleasant to work with.
 As an example, data models in the eclipse framework are defined in an XML-based
 language called XMI.
 For a simple 
\emph on
book
\emph default
 class with a 
\emph on
title
\emph default
 attribute and a 
\emph on
pages
\emph default
 attribute the definition looks like this:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize},breaklines=true"
inline false
status open

\begin_layout Plain Layout

</xsd:schema><ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI"
\end_layout

\begin_layout Plain Layout

  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
\end_layout

\begin_layout Plain Layout

  xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore"
\end_layout

\begin_layout Plain Layout

  name="library "nsURI="http:///library.ecore" nsPrefix="library">
\end_layout

\begin_layout Plain Layout

<eClassifiers xsi:type="ecore:EClass" name="Book">
\end_layout

\begin_layout Plain Layout

  <eStructuralFeatures xsi:type="ecore:EAttribute" name="title"
\end_layout

\begin_layout Plain Layout

      eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
\end_layout

\begin_layout Plain Layout

  <eStructuralFeatures xsi:type="ecore:EAttribute" name="pages"
\end_layout

\begin_layout Plain Layout

      eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EInt"/>
\end_layout

\begin_layout Plain Layout

</eClassifiers>
\end_layout

\begin_layout Plain Layout

</ecore:EPackage>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
It is also possible to define data models through commercial graphical modeling
 tools or annotated java files.
\end_layout

\begin_layout Standard
The EMF auto-generates a lot of Java code that the user is supposed to make
 changes to or inherit from.
 This quickly becomes very large files with mixed usercode and generated
 code where one can easily get lost.
\end_layout

\end_body
\end_document
