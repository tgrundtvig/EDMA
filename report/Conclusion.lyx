#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Conclusion
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
label{sec:Conclusions}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this thesis work we have designed and implemented EDMA, a software system
 that can assist a java programmer in the process of converting a conceptual
 data model into a working implementation of the model in java.
 The system assists the process by:
\end_layout

\begin_layout Enumerate

\series bold
Reducing the amount of code the programmer must write.
\series default

\begin_inset Newline newline
\end_inset

This is done by auto generating an object oriented representation of the
 data model and the interface for the data model with corresponding java
 stub classes for the implementation of the interface.
 The programmer will only have to write the interface implementation using
 the object oriented representation.
 The code generation is based on a definition of the data model written
 in a simple language designed for the purpose.
 EDMA can easily be extended to support a graphical user interface for defining
 the data model.
\end_layout

\begin_layout Enumerate

\series bold
Removing the task of implementing bi-directional entity-relationships
\series default

\begin_inset Newline newline
\end_inset

This is automatically implemented in the generated object oriented model.
\end_layout

\begin_layout Enumerate

\series bold
Removing the task of implementing remote access to the instances of the
 data model.
\series default

\begin_inset Newline newline
\end_inset

EDMA automatically generates a server program and a client proxy to facilitate
 remote access to the data model instances.
\end_layout

\begin_layout Enumerate

\series bold
Providing user interfaces for data input
\series default

\begin_inset Newline newline
\end_inset

EDMA automatically generates a textual user interface based on the defined
 data model interface.
 The user interface supports automatic value validation based on the constraints
 defined on the value domains.
 EDMA can easily be extended to generate other types of user interfaces
 e.g.
 a HTML based interface.
\end_layout

\begin_layout Enumerate

\series bold
Ensuring thread-safe access to the model instances in a multithreaded environmen
t
\series default

\begin_inset Newline newline
\end_inset

The instances of the generated data model are thread safe.
\end_layout

\begin_layout Enumerate

\series bold
Offering automatic persistence of the instances of the data model
\begin_inset Newline newline
\end_inset


\series default
The instances of the data model can be automatically and durably persisted
 to a file.
 The modular design of the example runtime makes it easy to implement alternativ
e persistence strategies.
\end_layout

\begin_layout Standard
EDMA includes a simple but yet expressive value domain system that can be
 used to define fine grained project domain specific value domains for immutable
 data values.
 The defined value domains are automatically transformed into java implementatio
ns with support for:
\end_layout

\begin_layout Itemize
streaming,
\end_layout

\begin_layout Itemize
conversion to and from strings,
\end_layout

\begin_layout Itemize
Javas container classes, by sensible implementations of equals, hashCode
 and compareTo,
\end_layout

\begin_layout Itemize
automatic value validation,
\end_layout

\begin_layout Itemize
interactive textual user interface for value creation through a simple terminal
 interface.
\end_layout

\begin_layout Paragraph
State of the system
\end_layout

\begin_layout Standard
EDMA is still in a prototype state and has not been systematically tested.
 But we have successfully used it on various experimental data models, including
 the diving school example model from this report.
\end_layout

\end_body
\end_document
